#include <iostream>
#include <random>
#include <string>
#include <cmath>

#include "md5.h"

using namespace std;

template <typename T>
T random_from(const T min, const T max)
{
    static random_device rdev;
    static default_random_engine re(rdev());
    typedef typename conditional<
        is_floating_point<T>::value,
        uniform_real_distribution<T>,
        uniform_int_distribution<T>>::type dist_type;
    dist_type uni(min, max);
    return static_cast<T>(uni(re));
}

unsigned long hex2dec(string hex)
{
    unsigned long result = 0;
    for (auto i = 0; i < hex.length(); i++) {
        if (hex[i] >= 48 && hex[i] <= 57)
        {
            result += (hex[i] - 48) * pow(16, hex.length() - i - 1);
        }
        else if (hex[i] >= 65 && hex[i] <= 70) {
            result += (hex[i] - 55) * pow(16, hex.length() - i - 1);
        }
        else if (hex[i] >= 97 && hex[i] <= 102) {
            result += (hex[i] - 87) * pow(16, hex.length() - i - 1);
        }
    }
    return result;
}

vector<string> generate()
{
	const string diglist = "0123456789ABCDEFGHJKLMNPQRTUVWXY";
	
    	string id;
    	id += diglist.substr(random_from(1, 9), 1);
    	id += diglist.substr(random_from(10, 31), 1);
   	 id += diglist.substr(random_from(10, 31), 1);
   	 id += diglist.substr(random_from(1, 9), 1);
   	 id += diglist.substr(random_from(1, 9), 1);

	const auto hash = md5(id);

    	string key;
	for (auto i = 0; i < 32; i += 2)
	{
		const auto nextdigit = hex2dec(hash.substr(i, 2)) & 31;

		if (((i % 8) == 0) && (i > 0))
		{
           		key += "-" + diglist.substr(nextdigit, 1);
		}
        	else
        	{
            		key += diglist.substr(nextdigit, 1);
        	}
	}
	return { id, key };
}

int main(void)
{
	for (auto i = 0; i < 5; i++)
	{
        	auto array = generate();
        	std::cout << array[0] << ":" << array[1] << "\n";
	}
   	getchar();
    	return 0;
}

